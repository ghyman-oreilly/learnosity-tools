[
  {
    "title": "Introduction to Functional Programming: Part 1",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>Rewrite the function definition <em>f</em>(<em>x</em>) = <em>x</em> + 1 using lambda notation.</p>",
        "options": [
          {
            "label": "<p><span><em>λ</em> <em>x</em> → <em>x</em> + 1</span></p>",
            "value": "0"
          },
          {
            "label": "<p><span><em>x</em> + 1</span></p>",
            "value": "1"
          },
          {
            "label": "<p><span><em>x</em> = <em>x</em> + 1</span></p>",
            "value": "2"
          },
          {
            "label": "<p><span><em>λ</em>  <em>x</em> + 1</span></p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>When you use lambda notation, you put the Greek letter <span><em>λ</em></span> before the function's parameter and put the function's formula after the right arrow. See “Using Filter, Map, and Fold.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of the expression (<span><em>λ</em> <em>x</em> → 6 * <em>x</em>)(21) </span>?</p>",
        "options": [
          {
            "label": "<p>126</p>",
            "value": "0"
          },
          {
            "label": "<p>6<em>x</em></p>",
            "value": "1"
          },
          {
            "label": "<p><em>f</em>(<em>x</em>) = 6<em>x</em></p>",
            "value": "2"
          },
          {
            "label": "<p>21</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>If we translate this expression into conventional function notation, we're applying the function <span><em>f</em>(<em>x</em>) = 6 * <em>x</em></span> to the value 21. And 6 times 21 is 126. See “Using Filter, Map, and Fold.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>foldFromLeft(minus, 7, [3, –8, 9])</code>?</p>",
        "options": [
          {
            "label": "<p>3</p>",
            "value": "0"
          },
          {
            "label": "<p>–13</p>",
            "value": "1"
          },
          {
            "label": "<p>5</p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>Applying <code>minus</code> from left to right, we have <span>7 − 3 − (−8) − 9 = 3</span>. See “Using Filter, Map, and Fold.”</p>",
        "hasRationales": true
      }
    ],
    "show_distractor_rationale": {
      "per_question": "incorrect",
      "per_response": "never"
    },
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Formative"
  },
  {
    "title": "Introduction to Functional Programming: Part 3",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>Let <span><em>f</em>(<em>x</em>) = <em>x</em> + 7</span>, <span><em>g</em>(<em>x</em>) = <em>x</em><sup>2</sup></span>, <span>$h(x) = \\frac{1}{x}$</span>. What's the value of <span><em>f</em> ∘ <em>g</em> ∘ <em>h</em>(5)</span> ?</p>",
        "options": [
          {
            "label": "<p><span>$7\\frac{1}{25}$</span></p>",
            "value": "0"
          },
          {
            "label": "<p><span>$\\frac{1}{144}$</span></p>",
            "value": "1"
          },
          {
            "label": "<p><span>$\\frac{1296}{25}$</span></p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p><span>$f \\circ g \\circ h(5) = f \\circ g\\left( \\frac{1}{5} \\right) = f\\left( \\frac{1}{25} \\right) = 7\\frac{1}{25}$</span>.</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is a higher-order function?</p>",
        "options": [
          {
            "label": "<p><code>forEach(list, f)</code> acts on the list <code>[l0, l1, ..., ln]</code> and returns <code>[f(l0), f(l1), ..., f(ln)]</code>.</p>",
            "value": "0"
          },
          {
            "label": "<p><code>sum(list)</code> acts on the list <code>[l0, l1, ..., ln]</code> and returns <code>l0 + l1 + ... + ln</code>.</p>",
            "value": "1"
          },
          {
            "label": "<p><code>addAndSquare(n1, n2)</code> acts on two numbers, <code>n1</code> and <code>n2</code>, and returns <code>(n1 + n2)2</code>.</p>",
            "value": "2"
          },
          {
            "label": "<p><code>mapSquare(list)</code> acts on the list <code>[l0, l1, ..., ln]</code> and returns <code>[l02, l12, ..., ln2]</code>.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>The second argument of the <code>forEach</code> function is a function, <code>f</code>. So <code>forEach</code> is a higher-order function. See “Higher-Order Functions.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is <em>not</em> true about function composition?</p>",
        "options": [
          {
            "label": "<p>For any two functions, <span><em>f</em></span> and <span><em>g</em></span>, <span><em>f</em>  ∘ <em>g</em></span> is the same as <span><em>g</em>  ∘ <em>f</em></span>.</p>",
            "value": "0"
          },
          {
            "label": "<p>Composition is a higher-order function.</p>",
            "value": "1"
          },
          {
            "label": "<p>For any two functions, <span><em>f</em></span> and <span><em>g</em></span>, <span><em>f</em>  ∘ <em>g</em></span> is a function.</p>",
            "value": "2"
          },
          {
            "label": "<p><code>sum(map(getAmount, [purchase0, purchase1, ..., purchasen]))</code> is an example of function composition.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>Let <span><em>f</em>(<em>x</em>) = <em>x</em> + 1</span> and <span><em>g</em>(<em>x</em>) = <em>x</em><sup>2</sup></span>. Then <span><em>f</em> ∘ <em>g</em>(2) = 5</span> and <span><em>g</em> ∘ <em>f</em>(2) = 9</span>. In this case, <span><em>f</em>  ∘ <em>g</em>  ≠ <em>g</em>  ∘ <em>f</em></span>. See “Higher-Order Functions.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In the video, we describe the <code>filter</code> function as follows:</p><pre>filter : function, list</pre><p>How can we use this notation to describe the function <span><em>f</em>(<em>x</em>) = <em>x</em> + 1</span>?</p>",
        "options": [
          {
            "label": "<pre>f : number → number</pre>",
            "value": "0"
          },
          {
            "label": "<pre>f : number → number + 1</pre>",
            "value": "1"
          },
          {
            "label": "<pre>f : function → function</pre>",
            "value": "2"
          },
          {
            "label": "<pre>f : x → x + 1</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>The argument of <code>f</code> is a number, and <code>f</code> returns a number as its result. See “Currying.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In the video, we describe the filter function as follows:</p><pre>filter : function, list</pre><p>We can obtain a function, <code>f</code>, by partially applying 2 to the first argument in the function <span><em>a</em><em>d</em><em>d</em>(<em>x</em>,<em>y</em>) = <em>x</em> + <em>y</em></span>. How can we use the notation to describe this new function <code>f</code>?</p>",
        "options": [
          {
            "label": "<pre>f : number → number</pre>",
            "value": "0"
          },
          {
            "label": "<pre>f : number, number → number</pre>",
            "value": "1"
          },
          {
            "label": "<pre>f : list → number</pre>",
            "value": "2"
          },
          {
            "label": "<pre>f : number → number + 2</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>The new function, <code>f</code>, is defined as follows: <span><em>f</em>(<em>y</em>) = 2 + <em>y</em></span>. The argument of <code>f</code> is a number, and the result returned by <code>f</code> is a number. See “Currying.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What functions do you get when you curry the function <span><em>f</em>(<em>x</em>,<em>y</em>) = <em>x</em><sup>2</sup> − <em>y</em></span>?</p>",
        "options": [
          {
            "label": "<p><code>curryF(0)</code> is a function of <code>y</code> that returns <code>-y</code>.</p><p><code>curryF(1)</code> is a function of <code>y</code> that returns <code>1 - y</code>.</p><p><code>curryF(2)</code> is a function of <code>y</code> that returns <code>4 - y</code>.</p><p>And so on.</p>",
            "value": "0"
          },
          {
            "label": "<p><code>curryF(0)</code> is a function of <code>x</code> that returns <code>x2</code>.</p><p><code>curryF(1)</code> is a function of <code>x</code> that returns <code>x2</code><code>- 1</code>.</p><p><code>curryF(2)</code> is a function of <code>x</code> that returns <code>x2 - 2</code>.</p><p>And so on.</p>",
            "value": "1"
          },
          {
            "label": "<pre>curryF(x, y) = f(y, x) = y2 - x</pre>",
            "value": "2"
          },
          {
            "label": "<pre>curryF(0) = f(0, 0) = 02 - 0 = 0\ncurryF(1) = f(1, 1) = 12 - 1 = 0\ncurryF(2) = f(2, 2) = 22 - 2 = 2</pre><p>And so on.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>When you curry a function of two arguments, you get several single-argument functions. You get each single-argument function by selecting a constant value for the first of the original two arguments. Therefore,</p><p><span>(<em>c</em><em>u</em><em>r</em><em>r</em><em>y</em><em>F</em>(0))(<em>y</em>) = 0<sup>2</sup> − <em>y</em>=  − <em>y</em> </span></p><p><span>(<em>c</em><em>u</em><em>r</em><em>r</em><em>y</em><em>F</em>(1))(<em>y</em>) = 1<sup>2</sup> − <em>y</em> = 1 − <em>y</em></span></p><p><span>(<em>c</em><em>u</em><em>r</em><em>r</em><em>y</em><em>F</em>(2))(<em>y</em>) = 2<sup>2</sup> − <em>y</em> = 4 − <em>y</em></span></p><p>And so on. See “Currying.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In the video, we describe the <code>filter</code> function as follows:</p><p><code>filter : function, list</code><span>→</span><code>list</code></p><p>How can we use the notation to describe the <span>∘</span> (function composition) operator?</p>",
        "options": [
          {
            "label": "<p><span>∘</span><code>: function, function</code><span>→</span><code>function</code></p>",
            "value": "0"
          },
          {
            "label": "<pre/>",
            "value": "1"
          },
          {
            "label": "<pre/>",
            "value": "2"
          },
          {
            "label": "<p><span>∘</span><code>: function, number</code><span>→</span><code>number</code></p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>If you have two functions, <span><em>f</em></span> and <span><em>g</em></span>, applying <span>∘</span> to these functions gives you a new function, namely <span><em>f</em>  ∘ <em>g</em></span>. See “Currying.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What do you get when you perform partial application twice on <code>foldFromLeft(f, n, list)</code>, using <code>sum</code> for <code>f</code> and <code>0</code> for <code>n</code>?</p>",
        "options": [
          {
            "label": "<p>You get a function <code>sum : list</code><span>→</span><code>number</code>. When you apply this function to a list, you get the sum of the elements in the list.</p>",
            "value": "0"
          },
          {
            "label": "<p>You get a number. It's the sum of the elements in the list.</p>",
            "value": "1"
          },
          {
            "label": "<p>You get a function <code>sumUp : number, list</code><span>→</span><code>number</code>. When you apply this function to a number and a list, you get the sum of the number plus the elements in the list.</p>",
            "value": "2"
          },
          {
            "label": "<p>You get a function <code>foldFromLeft : function, number, list</code><span>→ </span><code>number</code>.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>With one partial application, you get a function <code>sumOf : number, list</code><span>→</span><code>number</code>. This function adds up its <code>number</code> argument plus all the numbers in its <code>list</code> argument. With the second partial application, the new <code>sum</code> function adds up <code>0</code> plus all the numbers in its <code>list</code>. See “Currying.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In mathematics, <span><em>n</em>!</span> = the product of all numbers from 1 to <span><em>n</em>.</span> For example, <span>5! = 1 ⋅ 2 ⋅ 3 ⋅ 4 ⋅ 5 = 120</span>. Which recursive definition of <code>fact</code> takes a number <span><em>n</em></span>, and returns <span><em>n</em>!</span> as a numeric value?</p>",
        "options": [
          {
            "label": "<pre>fact(1) = 1\nfact(n) = fact(n - 1) * n</pre>",
            "value": "0"
          },
          {
            "label": "<pre>fact(1) = 1\nfact(n + 1) = fact(n - 1) * n</pre>",
            "value": "1"
          },
          {
            "label": "<pre>fact(1) = 1\nfact(n) = n * (n - 1)</pre>",
            "value": "2"
          },
          {
            "label": "<pre>fact(n) = n * fact(n - 1)</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>Substituting 2 for <code>n</code>, <code>fact(2) = fact(2-1)*2 = fact(1)*2 = 1*2 = 2</code>.</p><p>Substituting 3 for <code>n</code>, <code>fact(3) = fact(3-1)*3 = fact(2)*3 = 2*3 = 6</code>.</p><p>Substituting 4 for <code>n</code>, <code>fact(4) = fact(4-1)*4 = fact(3)*4 = 6*4 = 24</code>.</p><p>And so on. See “Lists.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>The Fibonacci sequence starts with the two numbers 1, 1. Each number thereafter is the sum of the two numbers before it in the sequence. For example, the sequence's third number is 1 + 1 = 2. The sequence's fourth number is 1 + 2 = 3. The sequence's fifth number is 2 + 3 = 5. And so on.</p><p>Which recursive definition of <code>fib</code> takes a number, <span><em>n</em></span>, and returns the <span><em>n</em></span><sup>th</sup> number in the Fibonacci sequence?</p>",
        "options": [
          {
            "label": "<pre>fib(1) = 1\nfib(2) = 1\nfib(n) = fib(n - 2) + fib(n - 1)</pre>",
            "value": "0"
          },
          {
            "label": "<pre>fib(n) = fib(n - 2) + fib(n - 1)</pre>",
            "value": "1"
          },
          {
            "label": "<pre>fib(1) = 1\nfib(n) = fib(n - 2) + fib(n - 1)</pre>",
            "value": "2"
          },
          {
            "label": "<pre>fib(1) = 1\nfib(2) = 1\nfib(n) = fib((n - 2) * (n - 1))</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<pre>fib(3) = fib(1) + fib(2) = 1 + 1 = 2\nfib(4) = fib(2) + fib(3) = 1 + 2 = 3\nfib(5) = fib(3) + fib(4) = 2 + 3 = 5</pre><p>And so on. See “Lists.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A function named <code>up</code> takes a number, <span><em>n</em></span>, and returns a list whose values are <span>0, 1, 2, …, <em>n</em></span>. Which recursive definition of <code>up</code> is correct?</p>",
        "options": [
          {
            "label": "<pre>up(0) = [0]\nup(n) = concat( up(n-1),[n] )</pre>",
            "value": "0"
          },
          {
            "label": "<pre>up(0) = [0]\nup(n) = up(n-1)::[n]</pre>",
            "value": "1"
          },
          {
            "label": "<pre>up(0) = [0]\nup(n) = concat( [n],up(n-1) )</pre>",
            "value": "2"
          },
          {
            "label": "<pre>up(0) = [0]\nup(n) = (n-1)::up(n)</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>For example:</p><pre>up(2) = concat(       up(1)        , [2] )\n      = concat( concat( up(0),[1] ), [2] )\n      = concat( concat(  [0] ,[1] ), [2] )\n      = concat(       [0,1]        , [2] )\n      = [0,1,2]</pre><p>See “More Recursion Examples.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Ackermann's function is defined as follows:</p><pre>ack(0,x) = x + 1\nack(n,0) = ack(n-1, 1)\nack(n,x) = ack(n-1, ack(n,x-1))</pre><p>Some values of the <code>ack</code> function are too large for any computer to calculate. For example, <code>ack(4,3)</code> is approximately <span>2<sup>2<sup>65536</sup></sup></span>, a number with more than 2,800 digits.</p><pre>ack(1,1)</pre>",
        "options": [
          {
            "label": "<pre>3</pre>",
            "value": "0"
          },
          {
            "label": "<pre>1</pre>",
            "value": "1"
          },
          {
            "label": "<p><span>2<sup>2<sup>2</sup></sup></span></p>",
            "value": "2"
          },
          {
            "label": "<pre>0</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>To find the value of <code>ack(1,1)</code>, start by applying the third line in the definition:</p><pre>ack(1,1) = ack(0, ack(1,0))</pre><p>Then, apply the second line in the definition:</p><pre>         = ack(0, ack(0,1))</pre><p>Then, apply the first line in the definition:</p><pre>         = ack(0,     2   )</pre><p>Then, apply the first line again:</p><pre>         = 3</pre><p>See “More Recursion Examples.”</p>",
        "hasRationales": true
      }
    ],
    "show_distractor_rationale": {
      "per_question": "incorrect",
      "per_response": "never"
    },
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Formative"
  },
  {
    "title": "Introduction to Functional Programming: Part 5",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>sqrtMaybe(x-10) &gt;&gt;= minus4Maybe &gt;&gt;= reciprocalMaybe &gt;&gt;= plus13Maybe</code> when <code>x</code> is <code>10</code>?</p>",
        "options": [
          {
            "label": "<pre>Just 12.75</pre>",
            "value": "0"
          },
          {
            "label": "<pre>12.75</pre>",
            "value": "1"
          },
          {
            "label": "<pre>Nothing</pre>",
            "value": "2"
          },
          {
            "label": "<pre>0</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p><code>sqrtMaybe(10-10)</code> is <code>Just 0</code>.</p><p>Binding <code>Just 0</code> with <code>minus4Maybe</code> yields <code>Just -4</code>.</p><p>Binding <code>Just -4</code> with <code>reciprocalMaybe</code> yields <code>Just -1/4</code>.</p><p>Binding <code>Just -1/4</code> with <code>plus13Maybe</code> yields <code>Just 12.75</code>.</p><p>See “More Recursion Examples.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>sqrtMaybe(x-1) &gt;&gt;= minus4Maybe &gt;&gt;= reciprocalMaybe &gt;&gt;= plus13Maybe</code> when <code>x</code> is <code>17</code>?</p>",
        "options": [
          {
            "label": "<pre>Nothing</pre>",
            "value": "0"
          },
          {
            "label": "<pre>Just 12.75</pre>",
            "value": "1"
          },
          {
            "label": "<pre>12.75</pre>",
            "value": "2"
          },
          {
            "label": "<pre>0</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p><span>$\\frac{1}{(17 - 1) - 4} + \\ 13 \\neq 12.75$</span></p><p>See “More Recursion Examples.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>sqrtMaybe(x-10) &gt;&gt;= minus4Maybe &gt;&gt;= reciprocalMaybe &gt;&gt;= plus13Maybe</code> when <code>x</code> is <code>9</code>?</p>",
        "options": [
          {
            "label": "<pre>Nothing</pre>",
            "value": "0"
          },
          {
            "label": "<pre>Just Nothing</pre>",
            "value": "1"
          },
          {
            "label": "<pre>Just</pre>",
            "value": "2"
          },
          {
            "label": "<pre>Just 12.9230769231</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p><code>sqrtMaybe(9-10)</code> is <code>Nothing</code> (assuming we're not using imaginary numbers).</p><p>Binding <code>Nothing</code> with <code>minus4Maybe</code> yields <code>Nothing</code>.</p><p>Binding <code>Nothing</code> with <code>reciprocalMaybe</code> yields <code>Nothing</code>.</p><p>Binding <code>Nothing</code> with <code>plus13Maybe</code> yields <code>Nothing</code>.</p><p>See “More Recursion Examples.”</p>",
        "hasRationales": true
      }
    ],
    "show_distractor_rationale": {
      "per_question": "incorrect",
      "per_response": "never"
    },
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Formative"
  },
  {
    "title": "Introduction to Functional Programming: Summative Quiz",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>foldFromRight(minus, 0, [3, –8, 9])</code>?</p>",
        "options": [
          {
            "label": "<pre>20</pre>",
            "value": "0"
          },
          {
            "label": "<pre>2</pre>",
            "value": "1"
          },
          {
            "label": "<pre>-4</pre>",
            "value": "2"
          },
          {
            "label": "<pre>-14</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p>Applying <code>minus</code> from right to left, we have <span>3  − ((−8) −</span> (9<span> − 0)) = 3 − (−17) = 20</span>.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Let <span><em>f</em>(<em>x</em>) = 2<em>x</em></span> and <span><em>g</em>(<em>x</em>) = <em>x</em><sup>2</sup></span>. What's the value of <span><em>f</em> ∘ <em>g</em> ∘ <em>f</em>(5)</span> ?</p>",
        "options": [
          {
            "label": "<p><span>200</span></p>",
            "value": "0"
          },
          {
            "label": "<p><span>100</span></p>",
            "value": "1"
          },
          {
            "label": "<p><span>50</span></p>",
            "value": "2"
          },
          {
            "label": "<p>None of the other choices are correct.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationale": "<p><span><em>f</em> ∘ <em>g</em> ∘ <em>f</em>(5) = <em>f</em> ∘ <em>g</em>(10) = <em>f</em>(100) = 200</span></p><p>Learning Objective: Declare and evaluate functions whose parameters or result values (or both) are functions. Review “Part 3: Higher-Order Functions.”</p>",
        "hasRationales": true
      }
    ],
    "show_distractor_rationale": {
      "per_question": "incorrect",
      "per_response": "never"
    },
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Summative"
  }
]