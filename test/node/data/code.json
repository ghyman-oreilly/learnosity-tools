[
  {
    "title": "Introduction to Functional Programming: Part 1",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>filter(odd, [2, 25, 89, 32, 35])</code>?</p>",
        "options": [
          {
            "label": "<pre>[25, 89, 35]</pre>",
            "value": "0"
          },
          {
            "label": "<pre>[2, 25, 89, 32, 35]</pre>",
            "value": "1"
          },
          {
            "label": "<pre>[2,32]</pre>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>filter</code> function returns a list consisting of all the numbers for which <code>odd</code> is true. See “Solving a Problem Both Ways.”</p>",
          "<p>The <code>filter</code> function returns a list consisting of all the numbers for which <code>odd</code> is true, but 2 and 32 are not odd. See “Solving a Problem Both Ways.”</p>",
          "<p>The <code>filter</code> function returns a list consisting of all the numbers for which <code>odd</code> is true, but 2 and 32 are even, not odd. See “Solving a Problem Both Ways.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Your credit card bill categorizes purchases into categories like Food, Entertainment, and so on. You want to display items in the Food category whose amounts are $10 or more. Which of the following code fragments solves that problem?</p>",
        "options": [
          {
            "label": "<pre>for each purchase in purchasesList\n    if purchase.category == Food</pre>",
            "value": "0"
          },
          {
            "label": "<pre>for each purchase in purchasesList\n    if purchase.category == Food or purchase.amount &gt;= 10\n       print purchase</pre>",
            "value": "1"
          },
          {
            "label": "<pre>for each purchase in purchasesList\n    if purchase.amount &gt;= 10 or purchase.category == Food\n        print purchase</pre>",
            "value": "2"
          },
          {
            "label": "<pre>for each purchase in purchasesList\n    if purchase.amount == Food\n        if purchase.category &gt; 10\n            print purchase</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>print purchase</code> statement is executed only if both <code>purchase.category == Food</code> and <code>purchase.amount &gt;= 10</code> are true. See “Solving a Problem Both Ways.”</p>",
          "<p>With <code>or</code> in the condition, this code may print a purchase whose category is <code>Food</code> but whose amount is below <code>10</code>. See “Solving a Problem Both Ways.”</p>",
          "<p>With <code>or</code> in the condition, this code may print a purchase whose category is <code>Food</code> but whose amount is below <code>10</code>. See “Solving a Problem Both Ways.”</p>",
          "<p>This code doesn't print a <code>Food</code> purchase if its amount is exactly <code>10</code>. See “Solving a Problem Both Ways.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Your credit card bill categorizes purchases into categories like Food, Entertainment, and so on. You want to display items in the Food category whose amounts are $10 or more. Which of the following code fragments solves that problem?</p>",
        "options": [
          {
            "label": "<pre>hasCategoryFood(purchase) = purchase.category == Food\ntenOrMore(purchase) = purchase.amount &gt;= 10\nprint(filter(tenOrMore, filter(hasCategoryFood, purchasesList)))</pre>",
            "value": "0"
          },
          {
            "label": "<pre>hasCategoryFood(purchase) = purchase.category == Food\ntenOrMore(purchase) = purchase.amount &gt;= 10\nprint(tenOrMore, hasCategoryFood, purchasesList)</pre>",
            "value": "1"
          },
          {
            "label": "<pre>hasCategoryFood(purchase) = purchase.category == Food\ntenOrMore(purchase) = purchase.amount &gt;= 10\nfilter(print(tenOrMore, hasCategoryFood, purchasesList))</pre>",
            "value": "2"
          },
          {
            "label": "<pre>hasCategoryFood(purchase) = purchase.category == Food\ntenOrMore(purchase) = purchase.amount &gt;= 10\nprint(filter(tenOrMore,filter(purchasesList, hasCategoryFood)))</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>print</code> statement's argument filters first for Food and then for ten or more. See “Solving a Problem Both Ways.”</p>",
          "<p>The code should use <code>filter</code>, but it doesn't. See “Solving a Problem Both Ways.”</p>",
          "<p>The code should apply <code>filter</code> before applying <code>print</code>. This code applies <code>filter</code> after applying <code>print</code>. See “Solving a Problem Both Ways.”</p>",
          "<p>This code doesn't follow a consistent pattern for the positions of its parameters. For the inner call to <code>filter</code>, the Boolean condition comes second. For the outer call to <code>filter</code>, the Boolean condition comes first. See “Solving a Problem Both Ways.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>map(timesTwo, [2, 4, 5])</code>?</p>",
        "options": [
          {
            "label": "<pre>[4, 8, 10]</pre>",
            "value": "0"
          },
          {
            "label": "<pre>22</pre>",
            "value": "1"
          },
          {
            "label": "<pre>[2, 4]</pre>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>When you apply <code>timesTwo</code> to all three values in the list <code>[2, 4, 5]</code>, you get the list <code>[4, 8, 10]</code>. See “Using Filter, Map, and Fold.”</p>",
          "<p>When you apply <code>map</code> to a list, you get another list. See “Using Filter, Map, and Fold.”</p>",
          "<p>To evaluate this expression, you apply the <code>timesTwo</code> function to each of the numbers in the list <code>[2, 4, 5]</code>. See “Using Filter, Map, and Fold.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>You're given a list of customers. Each customer has a name and an outstanding balance. Which of the following code snippets prints the balance of the customer who has the smallest negative balance?</p><p>(Assume that the list has at least one customer in it and that customers' balances range between –1,000 and 1,000. Also, assume that the <code>max</code> function finds the largest of two numeric values.)</p>",
        "options": [
          {
            "label": "<pre>print(foldFromLeft(max, -1000,\n  filter(λ number -&gt; number &lt; 0,\n    map(λ customer -&gt; customer.balance , customersList))))</pre>",
            "value": "0"
          },
          {
            "label": "<pre>print(foldFromLeft(max, 1000,\n  filter(λ number -&gt; number &lt; 0,\n    map(λ customer -&gt; customer.balance , customersList))))</pre>",
            "value": "1"
          },
          {
            "label": "<pre>print(foldFromLeft(max, -1000,\n  filter(λ number -&gt; number &lt; 0, customersList))))</pre>",
            "value": "2"
          },
          {
            "label": "<pre>print(foldFromLeft(max, 1000,\n  map(λ customer -&gt; customer.balance,\n    filter(λ number -&gt; number &lt; 0))))</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>First, <code>map</code> creates a list of customer balances, then <code>filter</code> creates a list containing only the negative balances, and then <code>foldFromLeft</code> finds the largest of those remaining negative balances. See “Using Filter, Map, and Fold.”</p>",
          "<p>Evaluating <code>foldFromLeft(max, 1000, ...)</code> will yield the value 1,000. See “Using Filter, Map, and Fold.”</p>",
          "<p>You must create a list of customer balances from the <code>customersList</code>. See “Using Filter, Map, and Fold.”</p>",
          "<p>This code starts by trying to find values less than 0 among the values in the <code>customersList</code>, but values in the <code>customersList</code> aren't numbers. See “Using Filter, Map, and Fold.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is true?</p>",
        "options": [
          {
            "label": "<p>In functional programming, <code>map</code> behaves like an imperative loop, and <code>filter</code> behaves like an imperative <code>if</code>.</p>",
            "value": "0"
          },
          {
            "label": "<p>In functional programming, <code>map</code> behaves like an imperative <code>if</code>, and <code>filter</code> behaves like an imperative loop.</p>",
            "value": "1"
          },
          {
            "label": "<p>In imperative programming, <code>map</code> behaves like a functional loop, and <code>filter</code> behaves like a functional <code>if</code>.</p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>map</code> function \"iterates\" over all values in a list, and the <code>filter</code> function checks to see if a particular condition is true. See “Imperative and Functional Programming Languages.”</p>",
          "<p>An imperative <code>if</code> uses a Boolean expression, but a <code>map</code> function doesn't necessarily involve a Boolean expression. See “Imperative and Functional Programming Languages.”</p>",
          "<p>Functional programming uses recursion instead of loops. So, there isn't really a \"functional loop.\" See “Imperative and Functional Programming Languages.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In the imperative programming style, we combine statements by performing them one after another, by performing them upon checking an <code>if</code> condition, or by repeating them in a loop. How do we combine evaluations of functions in the functional programming style?</p>",
        "options": [
          {
            "label": "<p>We take the result of evaluating one function and make that result an argument for evaluating the next function.</p>",
            "value": "0"
          },
          {
            "label": "<p>We filter each function's input.</p>",
            "value": "1"
          },
          {
            "label": "<p>We apply functions to one another in the order in which they're defined in the program.</p>",
            "value": "2"
          },
          {
            "label": "<p>We use each function's result as an argument to every other function.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>For example, to find the sum of all food purchases, we take the result of filtering the <code>purchaseList</code> for <code>hasCategoryFood</code>, and make that result be an argument to the <code>map</code> function. See “Imperative and Functional Programming Languages.”</p>",
          "<p>Some functional programming doesn't involve filtering. For example, we may want to find the sum of all purchases, not only purchases satisfying the <code>hasCategoryFood</code> condition. See “Imperative and Functional Programming Languages.”</p>",
          "<p>The order in which functions are defined in the program doesn't matter. We apply functions in the order in which they need to be evaluated in order to get the desired result. See “Imperative and Functional Programming Languages.”</p>",
          "<p>We don't use every function's result as an argument to every other function. For example, in calculating the sum of food purchase amounts, we don't sum up the purchases themselves. Instead, we sum up the amounts of those particular purchases. We apply the <code>map</code> function with <code>getAmount</code> before performing the sum. See “Imperative and Functional Programming Languages.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following <em>imperative</em> code fragments correctly displays the sum of the even numbers in a list?</p>",
        "options": [
          {
            "label": "<pre>evenNumbers = filter(even, list)\ntotal = sum(evenNumbers)\nprint(total)</pre>",
            "value": "0"
          },
          {
            "label": "<pre>print(total)\ntotal = sum(evenNumbers)\nevenNumbers = filter(even, list)</pre>",
            "value": "1"
          },
          {
            "label": "<pre>total = sum(evenNumbers)\nevenNumbers = filter(even, list)\nprint(total)</pre>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>filter</code> function finds the even numbers. Then the <code>total</code> function sums up the even numbers. See “Imperative and Functional Programming Languages.”</p>",
          "<p>With imperative coding, statements are executed in the order in which they appear. In this code fragment, we're trying to print the <code>total</code> before we've calculated the value of <code>total</code>. See “Imperative and Functional Programming Languages.”</p>",
          "<p>With imperative coding, statements are executed in the order in which they appear. In this code fragment, we're trying to sum up the <code>evenNumbers</code> before we've applied <code>filter</code> to find the <code>evenNumbers</code> list. See “Imperative and Functional Programming Languages.”</p>"
        ],
        "hasRationales": true
      }
    ],
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Formative"
  },
  {
    "title": "Introduction to Functional Programming: Part 2",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>Which of the following is a pure function?</p>",
        "options": [
          {
            "label": "<pre>f(x) {\n  return x + 1\n}</pre>",
            "value": "0"
          },
          {
            "label": "<pre>f(x) {\n  x = x + 7\n  print x\n}</pre>",
            "value": "1"
          },
          {
            "label": "<pre>f(x) {\n  return x + y\n}</pre>",
            "value": "2"
          },
          {
            "label": "<pre>f(x) {\n  y = y + x\n  return y\n}</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This function is pure. It has no side effects because it uses only its parameter <code>x</code> and it doesn't modify any values that are declared outside of the function. See “Pure Functions.”</p>",
          "<p>This function isn't pure because the <code>print</code> call modifies something that's outside of the function. See “Pure Functions.”</p>",
          "<p>This function isn't pure because it uses the value of <code>y</code>, and <code>y</code> isn't defined inside the function. See “Pure Functions.”</p>",
          "<p>This function isn't pure because it uses the value of <code>y</code> and modifies the value of <code>y</code>, and <code>y</code> isn't defined inside the function. See “Pure Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is a pure function?</p>",
        "options": [
          {
            "label": "<pre>length(the_string_s) =</pre>",
            "value": "0"
          },
          {
            "label": "<pre>f(x) = x + current_day_of_the_month\nwhere current_day_of_the_month is a number from 1 to 31</pre>",
            "value": "1"
          },
          {
            "label": "<pre>post(message, URL) {\n  add the message to the message board at the URL\n}</pre>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This function is pure. It uses only its parameter, <code>s</code>. It returns a value, but it doesn't modify any value that's defined outside the function. See “Pure Functions.”</p>",
          "<p>This function isn't pure because it uses the current day of the month, which is defined outside of the function. See “Pure Functions.”</p>",
          "<p>This function isn't pure because it modifies the content of the message board, which is outside of the function. See “Pure Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is a referentially transparent expression?</p>",
        "options": [
          {
            "label": "<pre>7 + 6</pre>",
            "value": "0"
          },
          {
            "label": "<pre>inputFromKeyboard(x)</pre><p>(If you execute <code>y = inputFromKeyboard(x)</code>, and the user types <code>7</code>, then the value of <code>y</code> becomes <code>7</code>.)</p>",
            "value": "1"
          },
          {
            "label": "<pre>f(x) = x + current_day_of_the_month</pre><p>where <code>current_day_of_the_month</code> is a number from 1 to 31</p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This function is referentially transparent. You can substitute <code>13</code> for <code>7 + 6</code> anywhere in the code. See “Pure Functions.”</p>",
          "<p>This function isn't referentially transparent. You can't substitute <code>7</code> for this function call because the user may input a value other than 7. See “Pure Functions.”</p>",
          "<p>This function isn't referentially transparent. You can't substitute <code>x</code> plus a particular number from 1 to 31 for this function call, because you may call this function on any day of the month. See “Pure Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is an advantage of using pure functions?</p>",
        "options": [
          {
            "label": "<p>Code that uses pure functions is easier to understand (and thus easier to maintain) than code that uses impure functions.</p>",
            "value": "0"
          },
          {
            "label": "<p>Code that uses pure functions is more efficient (and thus runs faster) than code that uses impure functions.</p>",
            "value": "1"
          },
          {
            "label": "<p>Code that uses pure functions consumes less memory than code that uses impure functions.</p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This is correct. A pure function doesn't refer to any values that live outside of its own definition, so you can understand a pure function by looking only at the function itself. You don't have to keep track of any elements outside of the function's own code. See “Pure Functions.”</p>",
          "<p>There's nothing about a pure function that makes it run faster than an impure function. See “Pure Functions.”</p>",
          "<p>There's nothing about a pure function that makes it consume less memory than an impure function. See “Pure Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Consider the following code:</p><pre>total = 0\nfor n = 1 to 10 inclusive\n  total = total + n\nprint(total)</pre><p>Which of the following is true about this code? Select all that apply.</p>",
        "options": [
          {
            "label": "<p>This code prints the value <code>55</code>.</p>",
            "value": "0"
          },
          {
            "label": "<p>This code has a side effect.</p>",
            "value": "1"
          },
          {
            "label": "<p>The <code>total</code> variable is mutable.</p>",
            "value": "2"
          }
        ],
        "correctOptions": [
          "0",
          "1",
          "2"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": true,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This code adds 1 + 2 + 3 + . . . + 10 = 55. See “Pure Functions.”</p>",
          "<p>Printing is a side effect. See “Pure Functions.”</p>",
          "<p>The <code>total</code> variable is on the left side of an assignment statement. See “Pure Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>You want to store as much as you can in a bag whose capacity is 9 kilograms. You have objects weighing 7 kilograms, 5 kilograms, and 4 kilograms. If you followed a greedy method to solve the problem, you would start by putting the 7-kilogram object in first. Why is this a bad idea?</p>",
        "options": [
          {
            "label": "<p>You can store more in the bag if you don't include the 7-kilogram object.</p>",
            "value": "0"
          },
          {
            "label": "<p>A greedy method never yields the correct solution.</p>",
            "value": "1"
          },
          {
            "label": "<p>The function from sets of objects to total weight in the bag isn't a pure function.</p>",
            "value": "2"
          },
          {
            "label": "<p>You should always begin by putting the object with the least weight into the bag.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>If you include the 7-kilogram object, you have no room for anything else. But, if you omit the 7-kilogram object, you have room for the 5-kilogram and 4-kilogram objects, giving you a total of 9 kilograms. See “Testing, Debugging, and Memoization.”</p>",
          "<p>In some situations, the greedy method works. For example, in US coinage, you can form any amount by taking the largest valued coin first. To make 33 cents, you take a 25-cent coin (the largest denomination that's less than 33 cents), then a 5-cent coin (the largest denomination that's less than the remaining 9 cents), and then four 1-cent coins. The greedy method works for all amounts in almost all of the world's currencies. See “Testing, Debugging, and Memoization.”</p>",
          "<p>The function from sets of objects to total weights is a pure function. See “Testing, Debugging, and Memoization.”</p>",
          "<p>Putting the smallest weight in the bag first doesn't always work. For example, if you had objects weighing 9 kilograms, 2 kilograms, and 1 kilogram, putting the 1-kilogram object into a 9-kilogram bag wouldn't use the bag's full capacity. See “Testing, Debugging, and Memoization.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Consider this code:</p><pre>integer amount\namount = 0\nf(7)\nprintToScreen(output)\nfunction f(n) {\n  integer input\n  input = readFromKeyboard()\n  amount = input + n\n  printToScreen(amount)\n}</pre><p>Which feature of function <code>f</code> is considered to be a side effect? Select all that apply.</p>",
        "options": [
          {
            "label": "<p>The <code>f</code> function gets input from the keyboard, which is not internal to the function.</p>",
            "value": "0"
          },
          {
            "label": "<p>The <code>f</code> function sends output to the screen, which is not internal to the function.</p>",
            "value": "1"
          },
          {
            "label": "<p>The <code>f</code> function modifies the value of the <code>amount</code> variable, which is available outside of the function.</p>",
            "value": "2"
          },
          {
            "label": "<p>The function <code>f</code> uses the value of the variable <code>n</code>, but <code>n</code> gets its value <code>7</code> from code that's outside of the function.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0",
          "1",
          "2"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": true,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>Since the exact value of a user's keyboard input is not coded into function <code>f</code>, keyboard input is a side effect. See “Testing, Debugging, and Memoization.”</p>",
          "<p>Since the computer screen is controlled outside of the function <code>f</code>, output to the screen is a side effect. See “Testing, Debugging, and Memoization.”</p>",
          "<p>This function modifies the value of the variable <code>amount</code>, which is referenced outside of the function. This is a side effect. See “Testing, Debugging, and Memoization.”</p>",
          "<p>A function can use a value that's passed to it in its parameter list. This is not considered to be a side effect. See “Testing, Debugging, and Memoization.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What output(s) may result from running the following code?</p><pre>x = 0\nthree times do {\n  simultaneously do {\n    x = x + 1\n  }\n  and\n  {\n    x = x + 1\n  }\n}\nprint x</pre>",
        "options": [
          {
            "label": "<p>3, 4, 5, or 6</p>",
            "value": "0"
          },
          {
            "label": "<p>Only 3</p>",
            "value": "1"
          },
          {
            "label": "<p>Only 6</p>",
            "value": "2"
          },
          {
            "label": "<p>1, 2, 3, 4, 5, or 6</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>During any iteration of the loop, we have two threads executing <code>x = x + 1</code>. If both threads fetch the value of <code>x</code> (on the right side of the assignment) before either thread has updated <code>x</code> (on the left side of the assignment), then the result from both threads is to add only 1 to <code>x</code>. But if one thread updates <code>x</code> before the other thread fetches <code>x</code>, the result from both threads is to add 2 to <code>x</code>. So, the printed value of <code>x</code> depends on how many times one thread updates before the other thread fetches. This can happen 0 times, 1 time, 2 times, or all 3 times. The resulting values of <code>x</code> are 3, 4, 5, and 6. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>Outputs other than 3 may occur. For example, the system may start and finish executing each assignment statement before executing any other assignment statement. In that case, no race condition occurs, and the output is 6. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>Outputs other than 6 may occur. For example, during the first iteration, both threads may fetch the value of <code>x</code> (the value 0 on the right side of the assignment) before either thread has updated <code>x</code> (on the left side of the assignment). In that situation, both threads assign 1 to <code>x</code>. If this happens during all three iterations, the value of <code>x</code> goes from 0 to 1, then from 1 to 2, and finally from 2 to 3. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>Each of the three iterations results in an increment of either 1 or 2 to the value of <code>x</code>. So, the printed value of <code>x</code> is at least 3. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Alice visits an automated teller machine. She checks her account and learns that she has a $400 balance. Then she issues a request to withdraw $100, and the teller machine denies the request. How can this have been caused by a race condition?</p>",
        "options": [
          {
            "label": "<p>Between the time Alice checked her balance and the time she issued the withdrawal request, Alice's partner made a withdrawal from the same account.</p>",
            "value": "0"
          },
          {
            "label": "<p>Between the time Alice checked her balance and the time she issued the withdrawal request, the bank's computers went down.</p>",
            "value": "1"
          },
          {
            "label": "<p>Alice isn't permitted to withdraw more than $100 during a visit to the teller machine.</p>",
            "value": "2"
          },
          {
            "label": "<p>The teller machine is almost out of cash.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. In this case, the agents are Alice and her partner. The value is the amount in the account. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. The bank's computer going down isn't an attempt to modify a particular value. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. Alice's maximum withdrawal isn't an attempt to modify the value of the amount in her account. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. The amount of cash in the teller machine is not an attempt to modify the amount in Alice's account. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following phenomena make code susceptible to race conditions? Select all that apply.</p>",
        "options": [
          {
            "label": "<p>Impure functions</p>",
            "value": "0"
          },
          {
            "label": "<p>Shared variables</p>",
            "value": "1"
          },
          {
            "label": "<p>Simultaneous threads</p>",
            "value": "2"
          },
          {
            "label": "<p>Memoization</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0",
          "1",
          "2"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": true,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. An impure function may modify the value of a variable that's referenced by code outside the function. The impure function and the code outside the function are two agents, both of which may modify the variable's value. So, a race condition may occur. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. If a value is shared between two agents, they may both try to update that variable at the same time. Thus, a race condition may occur. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>A race condition occurs when two or more agents attempt to modify a particular value at the same time. When you have simultaneous threads, both threads may attempt to modify the value of a variable at the same time. Thus, a race condition may occur. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>",
          "<p>Memoization is a way of avoiding unnecessary function calls. The idea behind memoization doesn't involve the updating of a value by two agents at the same time. See “Avoiding Race Conditions and Achieving Thread Safety.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following parameter passing schemes is the least safe?</p>",
        "options": [
          {
            "label": "<p>Pass by reference to an impure function</p>",
            "value": "0"
          },
          {
            "label": "<p>Pass by value to an impure function</p>",
            "value": "1"
          },
          {
            "label": "<p>Pass by reference to a pure function</p>",
            "value": "2"
          },
          {
            "label": "<p>Pass by value to a pure function</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>Impure functions aren't as safe as pure functions. In addition, pass by reference lets a function point to values that are defined outside the function. Since the function can modify these values that live outside of the function, pass by reference is unsafe. See “Efficient Parameter Passing.”</p>",
          "<p>Impure functions aren't safe, but pass by value is safer than pass by reference. See “Efficient Parameter Passing.”</p>",
          "<p>Pure functions are safer than impure functions, but pass by reference isn't safe. One might argue that a function whose arguments are passed by reference is inherently impure. See “Efficient Parameter Passing.”</p>",
          "<p>Pass by value is safer than pass by reference, and pure functions are safer than impure functions. This scheme is the safest of all. See “Efficient Parameter Passing.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the output of the following code?</p><pre>x = 7\nf(x)\nprint(x)\nStop\nf(x) {\n    x = x + 1\n}</pre>",
        "options": [
          {
            "label": "<p>We're unable to determine the output without more information.</p>",
            "value": "0"
          },
          {
            "label": "<p>7</p>",
            "value": "1"
          },
          {
            "label": "<p>8</p>",
            "value": "2"
          },
          {
            "label": "<p>Runtime error</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>We're not told whether this code uses pass by value or pass by reference. If the code uses pass by value, the output is 7. But if the code uses pass by reference, the output is 8. See “Efficient Parameter Passing.”</p>",
          "<p>If this code uses pass by reference, the output is 8, not 7. See “Efficient Parameter Passing.”</p>",
          "<p>If this code uses pass by value, the output is 7, not 8. See “Efficient Parameter Passing.”</p>",
          "<p>Using pass by reference or pass by value, a run of this code will not generate an error. See “Efficient Parameter Passing.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A particular programming language implements parameter passing in three steps:</p><p>Copy the value of the calling code's variable to a target variable inside the function.</p><p>Execute the code inside the function.</p><p>Copy the value of the target variable inside the function back to the calling code's variable.</p><p>Which of the following is true about this parameter passing scheme?</p>",
        "options": [
          {
            "label": "<p>It's not safe and not efficient.</p>",
            "value": "0"
          },
          {
            "label": "<p>It's safe, but it's not efficient.</p>",
            "value": "1"
          },
          {
            "label": "<p>It's efficient, but it's not safe.</p>",
            "value": "2"
          },
          {
            "label": "<p>It's safe and efficient.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>This scheme isn't safe because copying a value from inside the function out to the calling code is a side effect. This scheme isn't efficient because it may involve copying a large amount of data from the calling code to the function and then back to the calling code. See “Efficient Parameter Passing.”</p>",
          "<p>This scheme isn't safe because copying a value from inside the function out to the calling code is a side-effect. See “Efficient Parameter Passing.”</p>",
          "<p>This scheme isn't efficient because it may involve copying a large amount of data from the calling code to the function and then back to the calling code. See “Efficient Parameter Passing.”</p>",
          "<p>This scheme is neither safe nor efficient. See “Efficient Parameter Passing.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In this problem, <code>++x</code> behaves as both an instruction and an expression. As an instruction, <code>++x</code> adds 1 to the value of <code>x</code>. As an expression, the value of <code>++x</code> is the newly obtained value of <code>x</code>. For example, the code</p><pre>x=7\nprint(++x)\nprint(x)</pre><pre>8 8</pre><p>With that in mind, what's the output of the following code when the language uses <em>eager</em> evaluation?</p><pre>x = 18\nif ++x &gt; 19 &amp; ++x is even\n    print(\"*\", x, \"*\")\nprint(x)</pre>",
        "options": [
          {
            "label": "<pre>20</pre>",
            "value": "0"
          },
          {
            "label": "<pre>*19* 19</pre>",
            "value": "1"
          },
          {
            "label": "<pre>19</pre>",
            "value": "2"
          },
          {
            "label": "<pre>*20* 20</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With eager evaluation, the code checks both conditions <code>++x &gt; 19</code> and <code>++x is even</code>. The condition <code>++x &gt; 19</code> makes the value of <code>x</code> be 19, and this condition is false (because <code>19 &gt; 19</code> is false). With eager evaluation, the condition <code>++x is even</code> makes the value of <code>x</code> be 20. The combined condition, <code>++x &gt; 19 &amp; ++x is even</code>, is false. So, the code doesn't print <code>*20*</code>. Instead, the code goes directly to the last statement, where it prints only the number <code>20</code>. See “Lazy Evaluation.”</p>",
          "<p>With eager evaluation, the code checks both conditions <code>++x &gt; 19</code> and <code>++x is even</code>. In evaluating the expression <code>++x &gt; 19 &amp; ++x is even</code>, the value of <code>++x</code> becomes 19 and then 20. Also note that the combined expression, <code>++x &gt; 19 &amp; ++x is even</code>, is false. So the code never prints a number surrounded by asterisks. See “Lazy Evaluation.”</p>",
          "<p>With eager evaluation, the code checks both conditions <code>++x &gt; 19</code> and <code>++x is even</code>. In evaluating the expression <code>++x &gt; 19 &amp; ++x is even</code>, the value of <code>++x</code> becomes 19 and then 20. See “Lazy Evaluation.”</p>",
          "<p>In the expression <code>++x &gt; 19</code>, the value of <code>++x</code> is 19. So, the combined condition, <code>++x &gt; 19 &amp; ++x is even</code>, is false. So, the code doesn't print <code>*20*</code>. See “Lazy Evaluation.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In this problem, <code>++x</code> behaves as both an instruction and an expression. As an instruction, <code>++x</code> adds 1 to the value of <code>x</code>. As an expression, the value of <code>++x</code> is the newly obtained value of <code>x</code>. For example, the code</p><pre>x=7\nprint(++x)\nprint(x)</pre><pre>8 8</pre><p>With that in mind, what's the output of the following code when the language uses <em>lazy</em> evaluation?</p><pre>x = 18\nif ++x &gt; 19 &amp; ++x is even\n    print(\"*\", x, \"*\")\nprint(x)</pre>",
        "options": [
          {
            "label": "<pre>19</pre>",
            "value": "0"
          },
          {
            "label": "<pre>18</pre>",
            "value": "1"
          },
          {
            "label": "<p>No output</p>",
            "value": "2"
          },
          {
            "label": "<pre>20</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With lazy evaluation, the code checks only one condition: <code>++x &gt; 19</code>. The condition <code>++x &gt; 19</code> makes the value of <code>x</code> be 19, and this condition is false (because <code>19 &gt; 19</code> is false). So, the code doesn't print a value with asterisks. Instead, the code goes directly to the last statement, where it prints the number <code>19</code>. See “Lazy Evaluation.”</p>",
          "<p>With lazy evaluation, the code checks only one condition: <code>++x &gt; 19</code>. The condition <code>++x &gt; 19</code> makes the value of <code>x</code> be 19, not 18. See “Lazy Evaluation.”</p>",
          "<p>The last statement in the code isn't inside the <code>if</code> statement. So the last statement in the code prints something. See “Lazy Evaluation.”</p>",
          "<p>With lazy evaluation, the code checks only one condition: <code>++x &gt; 19</code>. The condition <code>++x &gt; 19</code> makes the value of <code>x</code> be 19. The code never checks the other condition, <code>++x is even</code>, so the value of <code>x</code> never becomes 20. See “Lazy Evaluation.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A function named <code>firstOf</code> returns the first of two values in a pair of arguments. For example, <code>firstOf(25, 13)</code> is 25. Consider the following code:</p><pre>x = 0\nprint(firstOf(x, 1/x))</pre><p>What's the output of this code when the system uses <em>eager</em> evaluation?</p>",
        "options": [
          {
            "label": "<p>An error message</p>",
            "value": "0"
          },
          {
            "label": "<p>0</p>",
            "value": "1"
          },
          {
            "label": "<p>1/0</p>",
            "value": "2"
          },
          {
            "label": "<p>No output, because there’s an endless loop</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With eager evaluation, the system tries to evaluate both <code>x</code> and <code>1/x</code>. Evaluation of <code>x</code> goes smoothly, but evaluation of <code>1/x</code> causes an error because we can't divide by 0. See “Lazy Evaluation.”</p>",
          "<p>With eager evaluation, the system tries to evaluate both <code>x</code> and <code>1/x</code> before attempting to print the entire expression's value. See “Lazy Evaluation.”</p>",
          "<p>The first argument of the function isn't 1/0. See “Lazy Evaluation.”</p>",
          "<p>With eager evaluation, the system tries to evaluate both <code>x</code> and <code>1/x</code>. Evaluation of <code>1/x</code> causes an error because we can't divide by 0. See “Lazy Evaluation.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A function named <code>firstOf</code> returns the first of two values in a pair of arguments. For example, <code>firstOf(25, 13)</code> is 25. Consider the following code:</p><pre>x = 0\nprint(firstOf(x, 1/x))</pre><p>What's the output of this code when the system uses <em>lazy</em> evaluation?</p>",
        "options": [
          {
            "label": "<p>0</p>",
            "value": "0"
          },
          {
            "label": "<p>An error message</p>",
            "value": "1"
          },
          {
            "label": "<p>No output, because there's an endless loop</p>",
            "value": "2"
          },
          {
            "label": "<p>1/0</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With lazy evaluation, the system doesn't try to evaluate <code>1/x</code>. So, the program evaluates <code>x</code> and prints that value, which is 0. See “Lazy Evaluation.”</p>",
          "<p>With lazy evaluation, the system doesn't try to evaluate <code>1/x</code>. So, the program doesn't try to divide by 0. See “Lazy Evaluation.”</p>",
          "<p>This program has no looping. See “Lazy Evaluation.”</p>",
          "<p>The first argument of this function isn't 1/0. See “Lazy Evaluation.”</p>"
        ],
        "hasRationales": true
      }
    ],
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Formative"
  },
  {
    "title": "Introduction to Functional Programming: Summative Quiz",
    "refId": "",
    "shuffleItems": true,
    "questions": [
      {
        "type": "mcq",
        "stem": "<p>What's the value of <code>filter( isMammal, [cat, fly, rose] )</code>?</p>",
        "options": [
          {
            "label": "<pre>[cat]</pre>",
            "value": "0"
          },
          {
            "label": "<pre>cat</pre>",
            "value": "1"
          },
          {
            "label": "<pre>[]</pre>",
            "value": "2"
          },
          {
            "label": "<pre>[fly, rose]</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The <code>filter</code> function returns a list containing all the items for which <code>isMammal</code> is true.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>The <code>filter</code> function returns a list, even if that list contains a single element or no elements at all.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>The correct answer would be <code>[]</code> only if none of the items in the list <code>[cat, fly, rose]</code> satisfied the <code>isMammal</code> condition.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>The <code>filter</code> function doesn't eliminate list items that satisfy the <code>isMammal</code> condition.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of the following expression?</p><pre>sum( filter( isPositive, map(subtractTenFrom,[9,15,21,10,-4]) ) )</pre>",
        "options": [
          {
            "label": "<pre>16</pre>",
            "value": "0"
          },
          {
            "label": "<pre>55</pre>",
            "value": "1"
          },
          {
            "label": "<pre>45</pre>",
            "value": "2"
          },
          {
            "label": "<pre>51</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The expression's value is:</p><pre>  sum( filter( isPositive, [-1,5,11,0,-14] ) )\n= sum( [5,11] )\n= 16</pre><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>Apply the <code>map</code> function first. Then, apply <code>filter isPositive</code> to the result.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>Start the calculation by subtracting 10 from each number in the list. Then apply the <code>filter</code> function and, finally, apply the <code>sum</code> function.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>Did you forget to apply the <code>filter</code> function?</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the value of the following expression?</p><pre>foldFromLeft( smallerOf, 100, [9, 18, 21, 1] )</pre>",
        "options": [
          {
            "label": "<pre>1</pre>",
            "value": "0"
          },
          {
            "label": "<pre>100</pre>",
            "value": "1"
          },
          {
            "label": "<pre>[9, 18, 21, 1]</pre>",
            "value": "2"
          },
          {
            "label": "<p>None of the other choices are correct.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>The value of <code>foldFromLeft( smallerOf, 100, [9, 18, 21, 1] )</code> is:</p><pre>  smallerOf(smallerOf(smallerOf(smallerOf(100,9),18),21),1)\n= smallerOf(smallerOf(smallerOf(      9         ,18),21),1)\n= smallerOf(smallerOf(             9                ,21),1)\n= smallerOf(                    9                       ,1)\n= 1</pre><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>When you start applying the <code>smallerOf</code> function, you find <code>smallerOf(100,9)</code>, which is <code>9</code>. So, the value <code>100</code> is eliminated immediately.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>The value of this expression is a number, not a list of numbers.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>",
          "<p>One of the other choices is correct.</p><p>Learning Objective: Understand what distinguishes functional programming from other programming paradigms. Review “Part 1: Getting Started with Functional Programming.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A <em>side effect</em> occurs when...</p>",
        "options": [
          {
            "label": "<p>Evaluating an expression interacts with something other than the expression itself.</p>",
            "value": "0"
          },
          {
            "label": "<p>Your code involves an infinite loop.</p>",
            "value": "1"
          },
          {
            "label": "<p>You call a function with no parameters and no return value.</p>",
            "value": "2"
          },
          {
            "label": "<p>Evaluating an expression requires a call to a function.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>\"Something other than the expression\" is what's on the side in the term <em>side effect</em>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Infinite loops are bad, but the presence of an infinite loop doesn't always imply the existence of a side effect.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>A pure function with no parameters and no return value is probably useless, but it doesn't automatically have side effects.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Calling a function isn't a side effect.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is an example of a <em>side effect</em>?</p>",
        "options": [
          {
            "label": "<p>Referring to the same variable both inside and outside of a function</p>",
            "value": "0"
          },
          {
            "label": "<p>Calling a recursive function that has no base case</p>",
            "value": "1"
          },
          {
            "label": "<p>Attempting to call a function with an argument of the wrong type</p>",
            "value": "2"
          },
          {
            "label": "<p>Execution of any function written in an imperative programming style</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>For example, in the following code, the fact that <code>x</code> is referenced inside and outside of the function <code>f</code> constitutes a side effect:</p><pre>x = 0\nf(7)\nf(y) {\n    x = x + y\n}</pre><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>A recursive function with no base case can be very bad, but it's not an example of a side effect.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Calling a function with an argument of the wrong type may cause an error, but it's not an example of a side effect.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Some functions written in the imperative style don't have side effects. Here's an example using pass by value:</p><pre>f(x, y) {\n   x = x + 1\n   y = 2 * y\n   return x + y\n}</pre><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>A <em>pure function</em> is...</p>",
        "options": [
          {
            "label": "<p>A function with no side effects</p>",
            "value": "0"
          },
          {
            "label": "<p>A function with no output to the screen or to a file</p>",
            "value": "1"
          },
          {
            "label": "<p>A recursive function</p>",
            "value": "2"
          },
          {
            "label": "<p>A function with parameters and a return value</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>Any side effect makes a function impure.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>A function with no output may be impure in other ways.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Recursive functions can be pure.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>This choice is only partly correct. A pure function communicates with other code <em>only</em> through its parameters and return value.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>Which of the following is <em>not</em> an advantage of using pure functions?</p>",
        "options": [
          {
            "label": "<p>They can call themselves recursively.</p>",
            "value": "0"
          },
          {
            "label": "<p>They can be reused without regard to the context in which they're run.</p>",
            "value": "1"
          },
          {
            "label": "<p>They can be tested without any setup.</p>",
            "value": "2"
          },
          {
            "label": "<p>They can be memoized.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>A function that calls itself recursively may have side effects. Both pure and impure functions may call themselves recursively.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>A pure function has no side effects. So, when you execute a pure function, the context in which you run it doesn't matter.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>The only preparation required for testing a pure function is to supply parameter values to the function.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>When you run a pure function twice with the same parameter values, the return result will be the same. So, after running it the first time, you can save the return result for the next time you run it with the same parameter values.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>What's the output of the following code?</p><pre>x = 7\nf(x)\nprint(x)\nStop\nf(x) {\n    x = x + 1\n}</pre>",
        "options": [
          {
            "label": "<p>7 with pass by value; 8 with pass by reference</p>",
            "value": "0"
          },
          {
            "label": "<p>7</p>",
            "value": "1"
          },
          {
            "label": "<p>8</p>",
            "value": "2"
          },
          {
            "label": "<p>7 with pass by reference; 8 with pass by value</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With pass by value, when a function changes the value of one of its parameters, that change affects the value in the code that calls the function. With pass by reference, the change doesn't affect the value in the calling code.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>The output depends on whether the code uses pass by value or pass by reference.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>The output depends on whether the code uses pass by value or pass by reference.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>With pass by value, when a function changes the value of one of its parameters, that change affects the value in the code that calls the function. With pass by reference, the change doesn't affect the value in the calling code.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In a language with lazy evaluation, what's the output of the following code?</p><pre>f(x) = x + f(x)\ng(x,y) = x + x\nprint g(3,f(5))</pre>",
        "options": [
          {
            "label": "<p>6</p>",
            "value": "0"
          },
          {
            "label": "<p>5 + 5 + 5 + ...</p>",
            "value": "1"
          },
          {
            "label": "<p>No output. The program runs forever.</p>",
            "value": "2"
          },
          {
            "label": "<p>No output. The program stops running and displays an error message.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With lazy evaluation, the system doesn't try to find the value of <code>f(5)</code>. So the value that's printed is <code>g(3,f(5)) = 3 + 3 = 6</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>Only the first argument of <code>g</code> (namely, the number <code>3</code>), is used in evaluating <code>g(3,f(5))</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>An attempt to evaluate <code>f(5)</code> would make the program run forever (or until the system ran out of memory). But, with lazy evaluation, the system avoids having to evaluate <code>f(5)</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>With an attempt to evaluate <code>f(5)</code>, the program would keep running until it ran out of memory. At that point, the program would stop running and display an error message. But, with lazy evaluation, this code doesn't keep running. This code doesn't attempt to evaluate <code>f(5)</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In a language with eager evaluation, what's the output of the following code?</p><pre>x = 2\nprint secondElementOf([0*x,3*x,6*x,9*x,...])</pre>",
        "options": [
          {
            "label": "<p>No output with an infinite loop or terminating error</p>",
            "value": "0"
          },
          {
            "label": "<pre>6</pre>",
            "value": "1"
          },
          {
            "label": "<pre>[6]</pre>",
            "value": "2"
          },
          {
            "label": "<pre>12</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>With eager evaluation, the system tries to find infinitely many values in the list before looking for a second element.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>If the list's indices start with 1, and the language uses lazy evaluation, the output is <code>6</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>The value <code>[6]</code> is a list. It's not an element of the list <code>[0*x,3*x,6*x,9*x,...]</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>",
          "<p>If the list's indices start with 0, and the language uses lazy evaluation, the output is <code>12</code>.</p><p>Learning Objective: Distinguish pure functions from impure functions; declaring and evaluating pure functions. Review “Part 2: Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>In JavaScript, the call <code>setTimeout(code,delay)</code> executes the instructions in the <code>code</code> after waiting at least <code>delay</code> milliseconds. Which of the following statements is true about the <code>setTimeout</code> function?</p>",
        "options": [
          {
            "label": "<p><code>setTimeout</code> is a higher-order function.</p>",
            "value": "0"
          },
          {
            "label": "<p>The instructions in the <code>code</code> must be a pure function.</p>",
            "value": "1"
          },
          {
            "label": "<p>The instructions in the <code>code</code> must be referentially transparent.</p>",
            "value": "2"
          },
          {
            "label": "<p><code>setTimeout</code> is a composite function.</p>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<p>In the call <code>setTimeout(code,delay)</code>, the <code>code</code> is a set of instructions to be executed. In other words, the <code>code</code> is a function.</p><p>Learning Objective: Declare and evaluate functions whose parameters or result values (or both) are functions. Review “Part 3: Higher-Order Functions.”</p>",
          "<p>No such restriction exists. For example, the <code>code</code> might direct the system to print to the screen. If so, the <code>code</code> doesn't describe a pure function.</p><p>Learning Objective: Declare and evaluate functions whose parameters or result values (or both) are functions. Review “Part 3: Higher-Order Functions.”</p>",
          "<p>No such restriction exists. For example, the <code>code</code> might call the system to obtain a randomly generated number. If so, the <code>code</code> isn't referentially transparent.</p><p>Learning Objective: Declare and evaluate functions whose parameters or result values (or both) are functions. Review “Part 3: Higher-Order Functions.”</p>",
          "<p>Function composition plays no explicit role in the description of the <code>setTimeout</code> function.</p><p>Learning Objective: Declare and evaluate functions whose parameters or result values (or both) are functions. Review “Part 3: Higher-Order Functions.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>An empty list has no tail. But we can define</p><pre>tailMaybe([]) = Nothing\ntailMaybe(h::t) = Just t</pre><p>What's the value of <code>tailMaybe([3,2]) &gt;&gt;= tailMaybe</code>?</p>",
        "options": [
          {
            "label": "<pre>Just []</pre>",
            "value": "0"
          },
          {
            "label": "<pre>[]</pre>",
            "value": "1"
          },
          {
            "label": "<p>Undefined or error message</p>",
            "value": "2"
          },
          {
            "label": "<pre>Nothing</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<pre>tailMaybe([3,2])\n= tailMaybe(3::[2])\n= Just [2]</pre><p>and</p><pre>Just [2] &gt;&gt;= tailMaybe\n= Just 2::[] &gt;&gt;= tailMaybe\n= Just []</pre><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>The value returned from a <code>Maybe</code> function is either <code>Just</code> a value or <code>Nothing</code>.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>Remember that <code>tail(tail([3,2])) = []</code>. The empty list <code>[]</code> is a legal value. It doesn't automatically make the program crash.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>Remember that <code>tail(tail([3,2])) = []</code>. The empty list <code>[]</code> isn't the same as the <code>Nothing</code> value.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>"
        ],
        "hasRationales": true
      },
      {
        "type": "mcq",
        "stem": "<p>An empty list has no tail. But we can define</p><pre>tailMaybe([]) = Nothing\ntailMaybe(h::t) = Just t</pre><p>What's the value of the following expression?</p><pre>tailMaybe([3,2]) &gt;&gt;= tailMaybe &gt;&gt;= tailMaybe &gt;&gt;= tailMaybe</pre>",
        "options": [
          {
            "label": "<pre>Nothing</pre>",
            "value": "0"
          },
          {
            "label": "<pre>Just []</pre>",
            "value": "1"
          },
          {
            "label": "<p>Undefined or error message</p>",
            "value": "2"
          },
          {
            "label": "<pre>[]</pre>",
            "value": "3"
          }
        ],
        "correctOptions": [
          "0"
        ],
        "questionRefId": "",
        "itemRefId": "",
        "difficultyLevel": 0,
        "shuffleOptions": true,
        "multipleResponses": false,
        "tags": {
          "Publisher": [
            "O'Reilly Media"
          ],
          "Course FPID": [
            ""
          ]
        },
        "rationales": [
          "<pre>tailMaybe([3,2])\n= tailMaybe(3::[2])\n= Just [2]</pre><p>and</p><pre>Just [2] &gt;&gt;= tailMaybe\n= Just 2::[] &gt;&gt;= tailMaybe\n= Just []</pre><p>So,</p><pre>tailMaybe([3,2]) &gt;&gt;= tailMaybe &gt;&gt;= tailMaybe\n= Just [] &gt;&gt;= tailMaybe\n= Nothing</pre><p>And once you have <code>Nothing</code> in a chain of <code>Maybe</code> binds, all binds that come later in the sequence have the <code>Nothing</code> value.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>Once you have <code>Nothing</code> in a chain of <code>Maybe</code> binds, all binds that come later in the sequence have the <code>Nothing</code> value, not a <code>Just</code> value.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>Once you have <code>Nothing</code> in a chain of <code>Maybe</code> binds, all binds that come later in the sequence have the <code>Nothing</code> value, and <code>Nothing</code> values aren't \"undefined.\" A <code>Nothing</code> value doesn't automatically cause the program to crash.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>",
          "<p>The value returned from a <code>Maybe</code> function is either <code>Just</code> a value or <code>Nothing</code>.</p><p>Learning Objective: Understand monad operations and use them to create elegant code. Review “Part 5: Monads.”</p>"
        ],
        "hasRationales": true
      }
    ],
    "tags": {
      "Publisher": [
        "O'Reilly Media"
      ],
      "Question Bank FPID": [
        ""
      ],
      "Course FPID": [
        ""
      ]
    },
    "moduleType": "Summative"
  }
]